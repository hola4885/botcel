const { ModalSubmit } = require("@models");
const { EmbedBuilder, ActionRowBuilder, TextInputStyle, ModalBuilder } = require("discord.js");
const regp = require("./../../../../../mongodb/models/problemaA");

class Example extends ModalSubmit {
  constructor() {
    super("valor");
  }

  async run(client, int, data = {}) {
    try {
      // Obtener ID del ticket desde el mensaje
      const preguntaId = int.message.embeds[0].footer.text.slice(15);
      const pregunta = await regp.findById(preguntaId);

      // Obtener la calificaci√≥n y comentario del modal
      const calificacion = int.fields.getTextInputValue("calificacion");
      const comentario = int.fields.getTextInputValue("comentarios");

      // Validaci√≥n de calificaci√≥n
      if (isNaN(calificacion) || calificacion < 1 || calificacion > 5) {
        return int.reply({
          content: "‚ùå *¬øEn serio? La calificaci√≥n est√° entre 1 y 5... no hace falta ser Einstein para entenderlo.*",
          ephemeral: true,
        });
      }

      // Crear el embed de agradecimiento por la calificaci√≥n
      const calificacionEmbed = new EmbedBuilder()
        .setColor("#1E90FF")
        .setTitle("üéâ ¬°Gracias por tu calificaci√≥n, supongo!")
        .setDescription(
          `**Tu calificaci√≥n:** ${calificacion}/5 ‚≠ê\n\n` +
          `*Esperamos que este glorioso feedback nos ayude... o algo as√≠. Al menos lo intentamos.*`
        )
        .setThumbnail("https://media.discordapp.net/attachments/1330691603698024488/1331427816784269383/Doradito.png?ex=67919448&is=679042c8&hm=2a4e99264f645e6ca4821c934d7c329ffd9053c79f72d0d6801fa2b50031ece6&=&format=webp&quality=lossless&width=1025&height=269") // Imag√≠nate que pongas una imagen graciosa aqu√≠
        .setFooter({ text: "¬°Nos ayuda... o no?", iconURL: int.user.displayAvatarURL({ dynamic: true }) })
        .setTimestamp();

      // Responder al usuario con la calificaci√≥n
      await int.reply({ embeds: [calificacionEmbed] });

      // Crear un embed con los detalles de la rese√±a
      const rese√±aEmbed = new EmbedBuilder()
        .setTitle("|Ticket| ¬°Una nueva rese√±a, qu√© emocionante!")
        .setColor("#FF6347")
        .setDescription("üîç *Otra rese√±a se agrega a la lista... nada de qu√© presumir, pero bueno.*")
        .addFields(
          { name: "üë®‚Äçüíª **Staff Involucrado**", value: `<@${pregunta.staff}>`, inline: true },
          { name: "üìù **Comentario**", value: comentario || "*El silencio tambi√©n puede ser una respuesta... aunque no muy √∫til.*", inline: false },
          { name: "‚≠ê **Calificaci√≥n**", value: `${calificacion}/5`, inline: true }
        )
        .setFooter({ text: `Rese√±a de ${int.user.tag}`, iconURL: int.user.displayAvatarURL({ dynamic: true }) })
        .setTimestamp()
        .setImage("https://media.discordapp.net/attachments/1080699190797139998/1331420608747274400/Imagen_de_WhatsApp_2025-01-21_a_las_16.56.31_4a9b8b7c2.jpg?ex=67918d91&is=67903c11&hm=54929c912b90b9980abb1f5c2b343cfb391e5fddcca6ac24d4f002468714475b&=&format=webp&width=720&height=468"); // Imagen relacionada con la rese√±a, para hacerlo visualmente m√°s interesante

      // Enviar la rese√±a al canal de rese√±as
      const rese√±aChannel = client.channels.cache.get("1331446898116137083"); // Canal de rese√±as
      await rese√±aChannel.send({
        content: "*Otra rese√±a se agrega a la lista... nada de qu√© presumir, pero bueno.*",
        embeds: [rese√±aEmbed],
      });

      // Obtener los IDs de los canales del ticket desde `data`
      const ticketChannelId = data.ticketId; // ID del primer canal
      const remoteTicketChannelId = data.remoteTicketId; // ID del segundo canal

      // Funci√≥n para eliminar el canal despu√©s de un tiempo
      const eliminarCanalDespuesDeTiempo = (canalId, guildId, tiempoEnSegundos) => {
        setTimeout(async () => {
          const guild = client.guilds.cache.get(guildId); // ID del servidor
          const canal = await guild.channels.fetch(canalId);
          if (canal) {
            await canal.delete()
              .then(() => {
                console.log(`‚úîÔ∏è Canal ${canalId} eliminado con √©xito... o no. Qui√©n sabe.`);
              })
              .catch((error) => {
                console.error(`‚ùå Error al eliminar el canal ${canalId}:`, error);
              });
          } else {
            console.log(`üîç *El canal ${canalId} parece haberse desvanecido... ni modo.*`);
          }
        }, tiempoEnSegundos * 1000); // El tiempo en segundos convertido a milisegundos
      };

      // Eliminar el primer canal del ticket despu√©s de X segundos (por ejemplo, 10 segundos)
      if (ticketChannelId) {
        eliminarCanalDespuesDeTiempo(ticketChannelId, "1245743198957998112", 10); // 10 segundos
      }

      // Eliminar el segundo canal remoto del ticket despu√©s de X segundos (por ejemplo, 10 segundos)
      if (remoteTicketChannelId) {
        eliminarCanalDespuesDeTiempo(remoteTicketChannelId, "1328581555077120081", 10); // 10 segundos
      }

    } catch (error) {
      console.error("‚ùå Error al procesar la interacci√≥n:", error);
      return int.reply({
        content: "‚ùå *Ups... parece que algo sali√≥ mal, pero claro, nada es culpa nuestra. ¬°Qu√© sorpresa!*",
        ephemeral: true,
      });
    }
  }
}

module.exports = Example;
